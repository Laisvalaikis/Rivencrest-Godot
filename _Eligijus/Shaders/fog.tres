[gd_resource type="Shader" format=3 uid="uid://c8ydwtwb6a8ni"]

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D NOISE_PATTERN : repeat_enable;

// Amount of detail.
uniform int octaves = 4;

// Opacity of the output fog.
uniform float starting_amplitude: hint_range(0.0, 0.5) = 0.5;

// Rate of pattern within the fog.
uniform float starting_frequency = 1.0;

// Shift towards transparency (clamped) for sparser fog.
uniform float shift: hint_range(-1.0, 0.0) = -0.2;

// White cut off
uniform float white_cutoff: hint_range(0.0, 1.0) = 0.999;

uniform float scale: hint_range(0.0, 1.0) = 0.9;

// Direction and speed of travel.
uniform vec2 velocity = vec2(1.0, 1.0);

uniform vec2 fog_position = vec2(0.0, 0.0);

uniform vec2 square_size = vec2(0.0331, 0.0331);

uniform int fog_position_array_size = 0;

uniform vec2 fog_position_array[300];

uniform vec2 fog_player_position_array[300];

uniform vec2 fog_max_position = vec2(0.0, 0.0);

uniform int fog_player_position_array_size = 0;
// Color of the fog.
uniform vec4 fog_color = vec4(0.0, 0.0, 0.0, 1.0);

uniform float alpha_maximum_offset = 0.05;

float rand(vec2 uv) {
	float amplitude = starting_amplitude;
	float frequency = starting_frequency;
	float output = 0.0;
	for (int i = 0; i < octaves; i++) {
		output += texture(NOISE_PATTERN, uv * frequency).x * amplitude;
		amplitude /= 2.0;
		frequency *= 2.0;
	}
	return clamp(output + shift, 0.0, 1.0);
}

float truncate(float value) {
    // This will truncate the value, removing the fractional part
    return sign(value) * floor(abs(value));
}

float fogDistanceGraph(float alpha)
{
	return pow(alpha, 1.0/2.0);
}

float distanceCalulation(vec2 start, vec2 end)
{
	return (end.x - start.x) + (end.y - start.y);
}

vec4 rectanbleBorder(vec2 uv, vec4 color, vec2 start_position, vec2 position, vec2 end_position, vec2 size)
{
	vec4 tempColor = color;
	if ((uv.x > position.x - size.x / 2.0) && (uv.x < position.x + size.x / 2.0)
		&& (uv.y > position.y - size.y / 2.0) && (uv.y < position.y + size.y / 2.0)) {
		for(int i = 0; i < fog_player_position_array_size; i++)
		{
			float starting_point = 0.0;
			float current_point = distance(fog_player_position_array[i], position);
			float last_point = distance(fog_player_position_array[i], end_position);
			float current_position = ((current_point - starting_point) / (last_point - starting_point));
		    current_position = abs(current_position);
			current_position = clamp(current_position, 0.0, 1.0);
			float alpha = fogDistanceGraph(current_position) * (tempColor.a - alpha_maximum_offset);
			if(tempColor.a > alpha)
			{
				tempColor.a = alpha;
			}
		}
	}
	return tempColor;
}

void fragment() {
	vec4 mainTexture = texture(TEXTURE, UV);
	vec2 motion = vec2(rand(UV + TIME * starting_frequency * velocity));
	vec4 negative_fog_value = vec4(1.0 - fog_color.rgb, fog_color.a);
	vec4 color = mix(mainTexture, fog_color, rand(UV + motion));

	for (int i = 0; i < fog_position_array_size; i++) 
	{
		color = rectanbleBorder(UV, color, fog_position_array[1].rg, fog_position_array[i].rg, fog_max_position, square_size);
	}
	
	COLOR = color;
}
"
