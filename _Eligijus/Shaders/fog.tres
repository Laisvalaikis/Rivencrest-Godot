[gd_resource type="Shader" format=3 uid="uid://c8ydwtwb6a8ni"]

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D NOISE_PATTERN : repeat_enable;

// Amount of detail.
uniform int octaves = 4;

// Opacity of the output fog.
uniform float starting_amplitude: hint_range(0.0, 0.5) = 0.5;

// Rate of pattern within the fog.
uniform float starting_frequency = 1.0;

// Shift towards transparency (clamped) for sparser fog.
uniform float shift: hint_range(-1.0, 0.0) = -0.2;

// White cut off
uniform float white_cutoff: hint_range(0.0, 1.0) = 0.999;

uniform float scale: hint_range(0.0, 1.0) = 0.9;

// Direction and speed of travel.
uniform vec2 velocity = vec2(1.0, 1.0);

uniform vec2 fog_position = vec2(0.0, 0.0);

uniform vec2 fog_size = vec2(0.1, 0.1);

uniform vec2 fog_border_size = vec2(0.0, 0.0);

uniform bool top_fog = false;

uniform bool bottom_fog = false;

uniform bool left_fog = false;

uniform bool right_fog = false;

// Color of the fog.
uniform vec4 fog_color = vec4(0.0, 0.0, 0.0, 1.0);

float rand(vec2 uv) {
	float amplitude = starting_amplitude;
	float frequency = starting_frequency;
	float output = 0.0;
	for (int i = 0; i < octaves; i++) {
		output += texture(NOISE_PATTERN, uv * frequency).x * amplitude;
		amplitude /= 2.0;
		frequency *= 2.0;
	}
	return clamp(output + shift, 0.0, 1.0);
}

float circle(vec2 position, float radius, float feather)
{
	return smoothstep(radius, radius + feather, length(position - vec2(0.5)));
}

vec4 rectangle(vec2 uv, vec2 pos, vec2 size, vec3 color) {
	float t = 0.0;
    if ((uv.x > pos.x - size.x / 2.0) && (uv.x < pos.x + size.x / 2.0)
		&& (uv.y > pos.y - size.y / 2.0) && (uv.y < pos.y + size.y / 2.0)) {
		t = 1.0;
		
		vec2 maxBoundrie = pos + size / 2.0;
		vec2 minBoundrie = pos - size / 2.0;
		
		vec2 boundary_size = maxBoundrie - minBoundrie;
		vec2 normalized_uv = (uv - minBoundrie) / boundary_size;
		vec2 dist_from_center = abs(normalized_uv - vec2(0.5, 0.5));
		
		float grad_distance = max(dist_from_center.x, dist_from_center.y);
		
		float gradient = 1.0 - grad_distance * 2.0;
    	gradient = clamp(gradient, 0.0, 1.0);
		
		return vec4(vec3(gradient), t);
	}
	return vec4(color, t);
}

vec4 rectanbleBorder(vec2 uv, vec4 color, vec2 position, vec2 size)
{
    //vec4 color = vec4(0,0,0,1);
	if ((uv.x > position.x - size.x / 2.0) && (uv.x < position.x + size.x / 2.0)
		&& (uv.y > position.y - size.y / 2.0) && (uv.y < position.y + size.y / 2.0)) {
		
		color = vec4(0,0,0,1);
		vec2 maxBoundrie = position + size / 2.0;
		vec2 minBoundrie = position - size / 2.0;
		
		vec2 boundary_size = maxBoundrie - minBoundrie;
		vec2 normalized_uv = (uv - minBoundrie) / boundary_size;
		vec2 dist_from_center = abs(normalized_uv - vec2(0.5, 0.5));
		
		float grad_distance = max(dist_from_center.x, dist_from_center.y);
		
		float gradient = 1.0 - grad_distance * 2.0;
    	gradient = clamp(gradient, 0.0, 1.0);
		color = vec4(vec3(gradient), 1);
		color.a = 1.0 - color.r * color.g * color.b * 100.0;
	}
	
	return color;
}

// function for side detection

void fragment() {
	vec4 mainTexture = texture(TEXTURE, UV);
	vec2 motion = vec2(rand(UV + TIME * starting_frequency * velocity));
	vec4 negative_fog_value = vec4(1.0 - fog_color.rgb, fog_color.a);
	vec4 color = mix(mainTexture, fog_color, rand(UV + motion));
	color = mainTexture;
	
	//color = colorRec * color;
	//COLOR = rectangle(UV, fog_position, vec2(0.03, 0.03), vec3(1.0, 1.0, 1.0)); // size is by uv size
	//COLOR = rectanbleBorder(UV, fog_position, vec2(0.03, 0.03), 0.01);
	COLOR = color;
	float real_alfa_cutoff = 1.0 - white_cutoff;
	//if(color.r * color.g * color.b > real_alfa_cutoff)
	//{
		////COLOR.rgb = vec3(0,0,0);
		//color.a = 0.0;
	//}
	vec4 colorRec = rectanbleBorder(UV,color, fog_position, vec2(0.04, 0.04));
	COLOR = colorRec;
}"
